name: livealone-test

on:
  push:
    branches: [ develop ]
  pull_request:
    branches:
      - develop

jobs:
  build-and-docker-push:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17 with OpenJDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_TAG_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-docker-push
    runs-on: ubuntu-22.04
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        run: echo ${{secrets.EC2_HOST}}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -d --name server -p 8080:8080 \
            --env MYSQL_USER=${{secrets.MYSQL_USER}} \
            --env MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            --env JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            --env ACCESS_EXPIRE_TIME=${{ secrets.ACCESS_EXPIRE_TIME }} \
            --env REFRESH_EXPIRE_TIME=${{ secrets.REFRESH_EXPIRE_TIME }} \
            --env SOCIAL_GOOGLE_CLIENT_ID=${{ secrets.SOCIAL_GOOGLE_CLIENT_ID }} \
            --env SOCIAL_GOOGLE_CLIENT_SECRET=${{ secrets.SOCIAL_GOOGLE_CLIENT_SECRET }} \
            --env SOCIAL_NAVER_CLIENT_ID=${{ secrets.SOCIAL_NAVER_CLIENT_ID }} \
            --env SOCIAL_NAVER_CLIENT_SECRET=${{ secrets.SOCIAL_NAVER_CLIENT_SECRET }} \
            --env SOCIAL_KAKAO_CLIENT_ID=${{ secrets.SOCIAL_KAKAO_CLIENT_ID }} \
            --env SOCIAL_KAKAO_CLIENT_SECRET=${{ secrets.SOCIAL_KAKAO_CLIENT_SECRET }} \
            --env MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }} \
            --env MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }} \
            --env DATABASE_HOST=${{secrets.DATABASE_HOST}} \
            --env SERVER_HOST=${{secrets.SERVER_HOST}} \
            --env FRONT_SERVER_HOST=${{secrets.FRONT_SERVER_HOST}} \
            --env KAKAO_CID=${{secrets.KAKAO_CID}} \
            --env KAKAO_SECRET_KEY=${{secrets.KAKAO_SECRET_KEY}} \
            --env ADMIN_CODE=${{secrets.ADMIN_CODE}} \
            --env DEFAULT_STREAM_KEY=${{secrets.DEFAULT_STREAM_KEY}} \
            --env LOGGING_LEVEL=${{secrets.LOGGING_LEVEL}} \
            --env ADMIN_TOKEN=${{secrets.ADMIN_TOKEN}} \
            --env MAIL_USERNAME=${{secrets.MAIL_USERNAME}} \
            --env MAIL_PASSWORD=${{secrets.MAIL_PASSWORD}} \
            --env MAIL_TIMEOUT=${{secrets.MAIL_TIMEOUT}} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{secrets.DOCKER_IMAGE_TAG_NAME}}:latest